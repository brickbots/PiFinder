#!/usr/bin/env python3
"""
Catalog Extractor

A command-line tool that extracts NGC and IC catalog descriptions from a formatted catalog file.
It creates dictionaries where the key is the catalog number and the value is the description.

Usage:
    python catalog_extractor.py input_file [--output OUTPUT] [--format {python,json,csv}]
"""

import argparse
import json
import csv
import os
import sys
import re
from typing import Dict, Tuple


def parse_catalog_data(data_text: str) -> Tuple[Dict[int, str], Dict[int, str]]:
    """
    Parse the provided catalog data and create formatted dictionaries.

    Args:
        data_text: The text content of the catalog file

    Returns:
        Tuple of (ngc_dict, ic_dict) where keys are catalog numbers and values are descriptions
    """
    ngc_dict = {}
    ic_dict = {}

    # Process each line
    lines = data_text.strip().split('\n')
    for line in lines:
        if not line.strip():
            continue

        # Handle NGC entries (entries that start with a number)
        if line.strip() and line.strip()[0].isdigit():
            # Extract NGC number from the beginning of the line
            parts = line.strip().split()
            if parts:
                try:
                    ngc_number = int(parts[0])
                    # The description starts at column 47 (index 46)
                    if len(line) > 46:
                        description = line[46:].strip()
                        ngc_dict[ngc_number] = description
                except ValueError:
                    pass

        # Handle IC entries (entries that start with 'I')
        elif line.strip().startswith('I'):
            # Use regex to extract IC number from patterns like "I  29" or "I1234"
            match = re.match(r'^I\s*(\d+)', line.strip())
            if match:
                try:
                    ic_number = int(match.group(1))
                    # The description starts at column 47 (index 46)
                    if len(line) > 46:
                        description = line[46:].strip()
                        ic_dict[ic_number] = description
                except ValueError:
                    pass

    return ngc_dict, ic_dict


def save_as_python(ngc_dict: Dict[int, str], ic_dict: Dict[int, str], output_file: str) -> None:
    """
    Save the dictionaries as a Python module.

    Args:
        ngc_dict: Dictionary with NGC catalog data
        ic_dict: Dictionary with IC catalog data
        output_file: Path to the output file
    """
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("#!/usr/bin/env python3\n")
        f.write("# Generated by catalog_extractor.py\n\n")

        f.write("# NGC catalog descriptions\n")
        f.write("ngc_descriptions = {\n")
        for number, description in sorted(ngc_dict.items()):
            # Escape any single quotes in the description
            escaped_desc = description.replace("'", "\\'")
            f.write(f"    {number}: '{escaped_desc}',\n")
        f.write("}\n\n")

        f.write("# IC catalog descriptions\n")
        f.write("ic_descriptions = {\n")
        for number, description in sorted(ic_dict.items()):
            # Escape any single quotes in the description
            escaped_desc = description.replace("'", "\\'")
            f.write(f"    {number}: '{escaped_desc}',\n")
        f.write("}\n")


def save_as_json(ngc_dict: Dict[int, str], ic_dict: Dict[int, str], output_file: str) -> None:
    """
    Save the dictionaries as a JSON file.

    Args:
        ngc_dict: Dictionary with NGC catalog data
        ic_dict: Dictionary with IC catalog data
        output_file: Path to the output file
    """
    # Convert integer keys to strings for JSON
    catalog_data = {
        "ngc": {str(k): v for k, v in ngc_dict.items()},
        "ic": {str(k): v for k, v in ic_dict.items()}
    }

    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(catalog_data, f, indent=2)


def save_as_csv(ngc_dict: Dict[int, str], ic_dict: Dict[int, str], output_file: str) -> None:
    """
    Save the dictionaries as CSV files.

    Args:
        ngc_dict: Dictionary with NGC catalog data
        ic_dict: Dictionary with IC catalog data
        output_file: Path to the output file base (will create two files)
    """
    # Remove extension if present
    base_name = os.path.splitext(output_file)[0]

    # Create NGC CSV
    ngc_file = f"{base_name}_ngc.csv"
    with open(ngc_file, 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["Catalog", "Number", "Description"])
        for number, description in sorted(ngc_dict.items()):
            writer.writerow(["NGC", number, description])

    # Create IC CSV
    ic_file = f"{base_name}_ic.csv"
    with open(ic_file, 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["Catalog", "Number", "Description"])
        for number, description in sorted(ic_dict.items()):
            writer.writerow(["IC", number, description])

    print(f"NGC data saved to: {ngc_file}")
    print(f"IC data saved to: {ic_file}")


def process_ngc2000_to_json(input_path: str, output_path: str) -> Tuple[int, int]:
    """
    Process NGC2000 data file and save descriptions as JSON.
    
    Args:
        input_path: Path to the input NGC2000 data file
        output_path: Path to save the output JSON file
        
    Returns:
        tuple[int, int]: Number of NGC and IC descriptions processed
        
    Raises:
        FileNotFoundError: If the input file doesn't exist
        Exception: If processing fails
    """
    if not os.path.isfile(input_path):
        raise FileNotFoundError(f"Input file not found: {input_path}")
    
    # Read and parse the catalog data
    with open(input_path, 'r', encoding='utf-8') as f:
        data_text = f.read()
    
    ngc_dict, ic_dict = parse_catalog_data(data_text)
    
    # Save as JSON
    save_as_json(ngc_dict, ic_dict, output_path)
    
    return len(ngc_dict), len(ic_dict)


def main():
    """Main function to parse command-line arguments and process the file."""
    parser = argparse.ArgumentParser(
        description="Extract NGC and IC catalog descriptions from a formatted catalog file."
    )
    parser.add_argument(
        "input_file",
        help="Path to the input catalog file"
    )
    parser.add_argument(
        "--output", "-o",
        help="Path to the output file (default: based on input filename)",
        default=None
    )
    parser.add_argument(
        "--format", "-f",
        choices=["python", "json", "csv"],
        default="python",
        help="Output format (default: python)"
    )

    args = parser.parse_args()

    # Check if input file exists
    if not os.path.isfile(args.input_file):
        print(f"Error: Input file '{args.input_file}' does not exist.")
        sys.exit(1)

    # Determine output filename if not specified
    if args.output is None:
        base_name = os.path.splitext(args.input_file)[0]
        if args.format == "python":
            args.output = f"{base_name}_catalog.py"
        elif args.format == "json":
            args.output = f"{base_name}_catalog.json"
        elif args.format == "csv":
            args.output = f"{base_name}_catalog.csv"

    # Read input file
    try:
        with open(args.input_file, 'r', encoding='utf-8') as f:
            data_text = f.read()
    except Exception as e:
        print(f"Error reading input file: {e}")
        sys.exit(1)

    # Parse catalog data
    print(f"Parsing catalog data from '{args.input_file}'...")
    ngc_dict, ic_dict = parse_catalog_data(data_text)

    # Print statistics
    print(f"Found {len(ngc_dict)} NGC objects and {len(ic_dict)} IC objects")

    # Save in the requested format
    try:
        if args.format == "python":
            save_as_python(ngc_dict, ic_dict, args.output)
            print(f"Catalog data saved as Python module: {args.output}")
        elif args.format == "json":
            save_as_json(ngc_dict, ic_dict, args.output)
            print(f"Catalog data saved as JSON: {args.output}")
        elif args.format == "csv":
            save_as_csv(ngc_dict, ic_dict, args.output)
    except Exception as e:
        print(f"Error saving output file: {e}")
        sys.exit(1)

    print("Done!")


if __name__ == "__main__":
    main()
